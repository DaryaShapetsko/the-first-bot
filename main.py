import logging
import sqlite3

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import state
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

TOKEN = '5135181457:AAEgmREifprqRrNi1rfRh9SaSB-YwuHri3k'
ADMIN = 519340190

kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(types.InlineKeyboardButton(text="–°–µ—Ä–≤–∏—Å PARTNER"))
kb.add(types.InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–æ–¥–∏—Ç–µ–ª–µ–º —Ç–∞–∫—Å–∏"))
kb.add(types.InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫—É—Ä—å–µ—Ä–æ–º"))
kb.add(types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
kb.add(types.InlineKeyboardButton(text="–ê–ö–¶–ò–ò"))
kb.add(types.InlineKeyboardButton(text="–†–û–ó–´–ì–†–´–®–ò"))
kb.add()
logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

conn = sqlite3.connect('db.db')
cur = conn.cursor()
cur.execute(
    """CREATE TABLE IF NOT EXISTS users(user_id INTEGER, block INTEGER);""")
conn.commit()


class dialog(StatesGroup):
    spam = State()


blacklist = State()
whitelist = State()


@dp.message_handler(commands=['start'])
async def start(message):
    cur = conn.cursor()
    cur.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
    result = cur.fetchone()
    if message.from_user.id == ADMIN:

        await message.answer(
            '–û—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 5 –º–∏–Ω—É—Ç.\n'
            '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ\n'
            '–°–¢–ê–†–¢\n'
            'üëáüëáüëáüëáüëáüëáüëáüëá\n'
            '\n'
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /off —á—Ç–æ–±—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.',
            reply_markup=kb)
        await message.answer(
            '–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞?\n'
            '–í–∞–º —Å—é–¥–∞: @Manybot\n',
            reply_markup=kb)
    else:
        if result is None:
            cur = conn.cursor()
            cur.execute(
                f'''SELECT * FROM users WHERE (user_id="{message.from_user.id}")''')
            entry = cur.fetchone()
            if entry is None:
                cur.execute(
                    f'''INSERT INTO users VALUES ('{message.from_user.id}', '0')''')
                conn.commit()
                await message.answer('')
        else:
            await message.answer('–¢—ã –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')


@dp.message_handler(content_types=['text'])
async def bot_message(message):
    if message.chat.type == 'private':
        if message.text == "–°–µ—Ä–≤–∏—Å PARTNER":
            await bot.send_message(
                message.chat.id,
                '–£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n'
                'https://telegra.ph/PARTNER-REGISTRACIYA-V-SERVISE-05-16')
        elif message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–æ–¥–∏—Ç–µ–ª–µ–º —Ç–∞–∫—Å–∏":
            # kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # item1 = types.InlineKeyboardButton(text="–õ–ò–ß–ù–´–ï –î–ê–ù–ù–´–ï")
            # item7 = types.InlineKeyboardButton(text="–î–ê–ù–ù–´–ï –ê–í–¢–û–ú–û–ë–ò–õ–Ø")
            # back = types.InlineKeyboardButton(text="–ù–ê–ó–ê–î")
            # kb.add(item1, item2, back)
            await bot.send_message(message.chat.id,
                                   "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–æ–¥–∏—Ç–µ–ª–µ–º —Ç–∞–∫—Å–∏,–≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ PARTNER, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ë–û–¢–£ –õ–ò–ß–ù–´–ï –î–ê–ù–ù–´–ï –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ")
        elif message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫—É—Ä—å–µ—Ä–æ–º":
            await bot.send_message(message.chat.id,
                                   "–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º –∏–ª–∏ –±–µ–∑?")
        elif message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            await bot.send_message(message.chat.id,
                                   "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –≤ –ü–û–î–î–ï–†–ñ–ö–£")
        elif message.text == "–ê–ö–¶–ò–ò":
            await bot.send_message(message.chat.id,
                                   "–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ")
        else:
            await bot.send_message(message.chat.id,
                                   "–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤—Å–µ –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")





if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
